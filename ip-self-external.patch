From b3311955417a3f7aed2ca8f77754c62eff2f7a44 Mon Sep 17 00:00:00 2001
From: Alex Varju <alex@varju.ca>
Date: Sat, 15 Nov 2014 22:14:01 -0800
Subject: [PATCH] add support for a ip_plexconnect_external setting for cases
 where plexconnect is hidden behind NAT

---
 DNSServer.py   |  9 +++++----
 PlexConnect.py | 10 ++++++++++
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/DNSServer.py b/DNSServer.py
index 54c553a..4fe719c 100755
--- a/DNSServer.py
+++ b/DNSServer.py
@@ -318,6 +318,7 @@ def Run(cmdPipe, param):
     dinit(__name__, param)  # init logging, DNSServer process
     
     cfg_IP_self = param['IP_self']
+    cfg_IP_self_external = param['IP_self_external']
     cfg_Port_DNSServer = param['CSettings'].getSetting('port_dnsserver')
     cfg_IP_DNSMaster = param['CSettings'].getSetting('ip_dnsmaster')
     
@@ -347,7 +348,7 @@ def Run(cmdPipe, param):
 
     dprint(__name__, 0, "***")
     dprint(__name__, 0, "DNSServer: Serving DNS on {0} port {1}.", cfg_IP_self, cfg_Port_DNSServer)
-    dprint(__name__, 1, "intercept: {0} => {1}", intercept, cfg_IP_self)
+    dprint(__name__, 1, "intercept: {0} => {1}", intercept, cfg_IP_self_external)
     dprint(__name__, 1, "restrain: {0} => 127.0.0.1", restrain)
     dprint(__name__, 1, "forward other to higher level DNS: "+cfg_IP_DNSMaster)
     dprint(__name__, 0, "***")
@@ -388,8 +389,8 @@ def Run(cmdPipe, param):
                     paket+=data[12:]                                     # original query
                     paket+='\xc0\x0c'                                    # pointer to domain name/original query
                     paket+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'    # response type, ttl and resource data length -> 4 bytes
-                    paket+=str.join('',map(lambda x: chr(int(x)), cfg_IP_self.split('.'))) # 4bytes of IP
-                    dprint(__name__, 1, "-> DNS response: "+cfg_IP_self)
+                    paket+=str.join('',map(lambda x: chr(int(x)), cfg_IP_self_external.split('.'))) # 4bytes of IP
+                    dprint(__name__, 1, "-> DNS response: "+cfg_IP_self_external)
                 
                 elif domain in restrain:
                     dprint(__name__, 1, "***restrain request")
@@ -403,7 +404,7 @@ def Run(cmdPipe, param):
                     paket+='\xc0\x0c'                                    # pointer to domain name/original query
                     paket+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'    # response type, ttl and resource data length -> 4 bytes
                     paket+='\x7f\x00\x00\x01'  # 4bytes of IP - 127.0.0.1, loopback
-                    dprint(__name__, 1, "-> DNS response: "+cfg_IP_self)
+                    dprint(__name__, 1, "-> DNS response: "+cfg_IP_self_external)
                 
                 else:
                     dprint(__name__, 1, "***forward request")
diff --git a/PlexConnect.py b/PlexConnect.py
index d3ea806..1c5fddb 100755
--- a/PlexConnect.py
+++ b/PlexConnect.py
@@ -41,6 +41,15 @@ def getIP_self():
     return IP
 
 
+def getIP_self_external(IP_self):
+    cfg = param['CSettings']
+    IP = cfg.getSetting('ip_plexconnect_external')
+    if IP:
+        dprint('PlexConnect', 0, "IP_self_external: "+IP)
+        return IP
+    else:
+        return IP_self
+
 
 # initializer for Manager, proxy-ing ATVSettings to WebServer/XMLConverter
 def initProxy():
@@ -82,6 +91,7 @@ def startup():
     
     # more Settings
     param['IP_self'] = getIP_self()
+    param['IP_self_external'] = getIP_self_external(param['IP_self'])
     param['HostToIntercept'] = cfg.getSetting('hosttointercept')
     param['baseURL'] = 'http://'+ param['HostToIntercept']
     
-- 
2.16.2

